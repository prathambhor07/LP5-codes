#include <iostream>
#include <queue>
#include <vector>
#include <omp.h>

using namespace std;

// Function to perform Breadth First Search on a graph
// represented using adjacency list
void bfs(vector<vector<int> >& adjList, int startNode,vector<bool>& visited)
{
    // Create a queue for BFS
    queue<int> q;

    // Mark the current node as visited and enqueue it
    visited[startNode] = true;
    q.push(startNode);

    // Iterate over the queue
    while (!q.empty()) {
        #pragma omp parallel
        {
            // Dequeue a vertex from queue and print it
            int currentNode;
            #pragma omp critical
            {
                currentNode = q.front();
                q.pop();
                cout << currentNode << " ";
            }

            // Get all adjacent vertices of the dequeued vertex
            // currentNode If an adjacent has not been visited,
            // then mark it visited and enqueue it
            #pragma omp for
            for (int neighbor : adjList[currentNode]) {
                if (!visited[neighbor]) {
                    #pragma omp critical
                    {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
    }
}

// Function to add an edge to the graph
void addEdge(vector<vector<int> >& adjList, int u, int v)
{
    adjList[u].push_back(v);
}

int main()
{
    // Number of vertices in the graph
    int vertices = 5;

    // Adjacency list representation of the graph
    vector<vector<int> > adjList(vertices);

    // Add edges to the graph
    addEdge(adjList, 0, 1);
    addEdge(adjList, 0, 2);
    addEdge(adjList, 1, 3);
    addEdge(adjList, 1, 4);
    addEdge(adjList, 2, 4);

    // Mark all the vertices as not visited
    vector<bool> visited(vertices, false);

    // Perform BFS traversal starting from vertex 0
    bfs(adjList, 0, visited);

    return 0;
}







FOR USER INPUT,
for(int i=0;i<5;i++)
    {
        int u,v;
        cin>>u>>v;
        addEdge(adjList,u,v);
    }


comment all addedge ones